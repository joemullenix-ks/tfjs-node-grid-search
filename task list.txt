2020 11 17


BUGS
This isn't catching the 0.3 cases, but it should, since bounds are inclusive:
	AXES.push(new Axis(	Axis.TYPE_VALIDATION_SPLIT,
						0.1,	// boundsBegin
						0.3,	// boundsEnd
						new LinearProgression(0.2)));


TODO
TS conversion:
	- full require() pass
	- full 'ANY' pass
	- full 'AS' pass
	- export a completely minified, bundled, whatever'd NPM-ready package

Break out a core object in (or from) ModelParams, with the literal TF types for each param; drop the dynamic list

Write the CSVSource interface // This may be much better held until after TS.

Project upgrades; Lint, TS, Travis(?), JSDOC, public Git, NPM

Expose more behavior via optional callbacks
	Custom models
		Custom initializers, optimizers, loss functions, metrics
		NOTE: We could get a lot of bang/buck by exposing model.compile!
	Detection and interventions on overfit/stuck

Support other network types (e.g. regression)

Custom schedules, rather than progressions

There are more model params to support as axes
	bias
	dropouts

Separate the concept of pass (repetition of iteration) and iteration (grid cell)

Write the model & weight files // BLOCKED by the tfjs-node bug; do this on Unix

Smart-start method for skipping poor/unlucky initial weights
	for a given config, run the first epoch x times (say 5);
	use those runs' scores to set a min-acceptable (say the median);
	abort and retry all runs that don't open above that baseline;

Abort on overfit/stuck

Report and save overfit/stuck

FORK/SPAWN for simultaneous runs
