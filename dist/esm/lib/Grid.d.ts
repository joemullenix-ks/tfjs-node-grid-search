import * as TENSOR_FLOW from '@tensorflow/tfjs-node';
import * as Types from '../ts_types/Grid';
import { AxisSet } from './AxisSet';
import { GridOptions } from './GridOptions';
import { ModelParams } from './ModelParams';
import { ModelStatics } from './ModelStatics';
import { ModelTestStats } from './ModelTestStats';
import { SessionData } from './SessionData';
declare class Grid {
    private _modelStatics;
    private _sessionData;
    private _callbackEvaluatePrediction;
    private _userGridOptions?;
    private _callbackReportIteration?;
    private _callbackReportEpoch?;
    private _callbackReportBatch?;
    private _axisSetTraverser;
    private _epochStats;
    private _gridOptions;
    private _timeStartBatch;
    private _timeStartEpoch;
    private _timeStartGrid;
    private _timeStartIteration;
    constructor(axisSet: AxisSet, _modelStatics: ModelStatics, _sessionData: SessionData, _callbackEvaluatePrediction: Types.CallbackEvaluatePrediction, _userGridOptions?: GridOptions | undefined, _callbackReportIteration?: Types.CallbackReportIteration | undefined, _callbackReportEpoch?: Types.CallbackReportEpoch | undefined, _callbackReportBatch?: Types.CallbackReportBatch | undefined);
    CreateModel(modelParams: ModelParams): TENSOR_FLOW.Sequential;
    ResetEpochStats(): void;
    Run(): Promise<void>;
    ResolveModelDefinition(): void;
    TestModel(model: TENSOR_FLOW.Sequential, modelParams: ModelParams, duration: number): ModelTestStats;
    TrainModel(model: TENSOR_FLOW.Sequential, modelParams: ModelParams): Promise<void>;
}
export { Grid };
